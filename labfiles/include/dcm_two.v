`timescale 1ns / 1ps
`ifndef __ICARUS__

////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2003 Xilinx, Inc.
// All Right Reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 7.1.04i
//  \   \         Application : 
//  /   /         Filename : dcm_two.v
// /___/   /\     Timestamp : 01/24/2006 14:46:26
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: 
//Design Name: dcm_two
//
// Module dcm_two
// Generated by Xilinx Architecture Wizard
// Written for synthesis tool: XST
`timescale 1ns / 1ps

// VERSION 1.1

/*PJH 1/29/06
**dcm_two instantiates a DCM (digital clock manager). It takes in a clock
**directly from the FPGA pin and outputs two other clocks: one by strictly
**dividing the input clock, and another by multiplying and dividing the input
**clock. For example, dcm_two can be used to generate a slow pixel clock and
**a faster system clock used for a processor pipeline. The module is
**parameterized, so the multiplication and division factors are specified when
**the module is instantiated. To set these parameters, use this syntax:
**   dcm_two #(CLK_D, CLK_M, CLKDV_D) instance_name(...);
**Where CLKFX_OUT = CLK_IN*CLK_M/CLK_D and CLKDV_OUT = CLK_IN/CLKDV_D. A reset
**signal is also output, which can (should) be used as a global reset signal.
**This module was created using the Xilinx Architecture Wizard.
*/

module dcm_two(
    CLK_IN, 
    //RST_IN, //may be useful in the future?
    CLKDV_OUT, 
    CLKFX_OUT, 
    RESET);  //RESET is high until the DCM syncs up with CLK_IN,
             //then goes low. It does not always have to be used.
    parameter CLK_D   = 2;    
    parameter CLK_M   = 2;    //Must be from 2 to 32
    parameter CLKDV_D = 1;
        //parameters can only be integers?

    input  CLK_IN;
    //input  RST_IN;
    output CLKDV_OUT;
    output CLKFX_OUT;
    output RESET;
    
    wire CLKDV_BUF;
    wire CLKFB_IN;
    wire CLKFX_BUF;
    wire CLKIN_IBUFG;
    wire CLK0_BUF;
    wire GND;
    wire system_dcm_rst;
    wire system_dcm_locked;
    
    assign GND = 0;
    BUFG CLKDV_BUFG_INST (.I(CLKDV_BUF), 
                          .O(CLKDV_OUT));
    BUFG CLKFX_BUFG_INST (.I(CLKFX_BUF), 
                          .O(CLKFX_OUT));
    IBUFG CLKIN_IBUFG_INST (.I(CLK_IN), 
                            .O(CLKIN_IBUFG));
    BUFG CLK0_BUFG_INST (.I(CLK0_BUF), 
                         .O(CLKFB_IN));

    assign RESET = !system_dcm_locked;

    // Period Jitter (unit interval) for block DCM_INST = 0.07 UI
    // Period Jitter (Peak-to-Peak) for block DCM_INST = 0.72 ns
    DCM DCM_INST (.CLKFB(CLKFB_IN), 
                  .CLKIN(CLKIN_IBUFG), 
                  .DSSEN(GND), 
                  .PSCLK(GND), 
                  .PSEN(GND), 
                  .PSINCDEC(GND), 
                  .RST(system_dcm_rst), //.RST(RST_IN), 
                  .CLKDV(CLKDV_BUF), 
                  .CLKFX(CLKFX_BUF), 
                  .CLKFX180(), 
                  .CLK0(CLK0_BUF), 
                  .CLK2X(), 
                  .CLK2X180(), 
                  .CLK90(), 
                  .CLK180(), 
                  .CLK270(), 
                  .LOCKED(system_dcm_locked), //.LOCKED(LOCKED_OUT), 
                  .PSDONE(), 
                  .STATUS());
    defparam DCM_INST.CLK_FEEDBACK = "1X";
    defparam DCM_INST.CLKDV_DIVIDE = CLKDV_D;
    defparam DCM_INST.CLKFX_DIVIDE = CLK_D;
    defparam DCM_INST.CLKFX_MULTIPLY = CLK_M;
    defparam DCM_INST.CLKIN_DIVIDE_BY_2 = "FALSE";
    defparam DCM_INST.CLKIN_PERIOD = 10.000000;
    defparam DCM_INST.CLKOUT_PHASE_SHIFT = "NONE";
    defparam DCM_INST.DESKEW_ADJUST = "SYSTEM_SYNCHRONOUS";
    defparam DCM_INST.DFS_FREQUENCY_MODE = "LOW";
    defparam DCM_INST.DLL_FREQUENCY_MODE = "LOW";
    defparam DCM_INST.DUTY_CYCLE_CORRECTION = "TRUE";
    defparam DCM_INST.FACTORY_JF = 16'hC080;
    defparam DCM_INST.PHASE_SHIFT = 0;
    defparam DCM_INST.STARTUP_WAIT = "FALSE";

    SRL16 RESET_SYSTEM_DCM (
    .Q (system_dcm_rst),
    .CLK (CLKIN_IBUFG),
    .D (1'b0),
    .A0 (1'b1),
    .A1 (1'b1),
    .A2 (1'b1),
    .A3 (1'b1)
    )/*synthesis xc_props="INIT = 000F"*/;

endmodule
`endif
